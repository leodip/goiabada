//go:build !production

// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks_user

import (
	models "github.com/leodip/goiabada/core/models"
	mock "github.com/stretchr/testify/mock"
)

// PermissionChecker is an autogenerated mock type for the PermissionChecker type
type PermissionChecker struct {
	mock.Mock
}

// FilterOutScopesWhereUserIsNotAuthorized provides a mock function with given fields: scope, user
func (_m *PermissionChecker) FilterOutScopesWhereUserIsNotAuthorized(scope string, user *models.User) (string, error) {
	ret := _m.Called(scope, user)

	if len(ret) == 0 {
		panic("no return value specified for FilterOutScopesWhereUserIsNotAuthorized")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string, *models.User) (string, error)); ok {
		return rf(scope, user)
	}
	if rf, ok := ret.Get(0).(func(string, *models.User) string); ok {
		r0 = rf(scope, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string, *models.User) error); ok {
		r1 = rf(scope, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserHasScopePermission provides a mock function with given fields: userId, scope
func (_m *PermissionChecker) UserHasScopePermission(userId int64, scope string) (bool, error) {
	ret := _m.Called(userId, scope)

	if len(ret) == 0 {
		panic("no return value specified for UserHasScopePermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(int64, string) (bool, error)); ok {
		return rf(userId, scope)
	}
	if rf, ok := ret.Get(0).(func(int64, string) bool); ok {
		r0 = rf(userId, scope)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(int64, string) error); ok {
		r1 = rf(userId, scope)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewPermissionChecker creates a new instance of PermissionChecker. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPermissionChecker(t interface {
	mock.TestingT
	Cleanup(func())
}) *PermissionChecker {
	mock := &PermissionChecker{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
