//go:build !production

// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks_validator

import (
	validators "github.com/leodip/goiabada/core/validators"
	mock "github.com/stretchr/testify/mock"
)

// AuthorizeValidator is an autogenerated mock type for the AuthorizeValidator type
type AuthorizeValidator struct {
	mock.Mock
}

// ValidateClientAndRedirectURI provides a mock function with given fields: input
func (_m *AuthorizeValidator) ValidateClientAndRedirectURI(input *validators.ValidateClientAndRedirectURIInput) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ValidateClientAndRedirectURI")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*validators.ValidateClientAndRedirectURIInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateRequest provides a mock function with given fields: input
func (_m *AuthorizeValidator) ValidateRequest(input *validators.ValidateRequestInput) error {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for ValidateRequest")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*validators.ValidateRequestInput) error); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateScopes provides a mock function with given fields: scope
func (_m *AuthorizeValidator) ValidateScopes(scope string) error {
	ret := _m.Called(scope)

	if len(ret) == 0 {
		panic("no return value specified for ValidateScopes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(scope)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthorizeValidator creates a new instance of AuthorizeValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthorizeValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthorizeValidator {
	mock := &AuthorizeValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
