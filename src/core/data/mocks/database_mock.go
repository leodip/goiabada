//go:build !production

// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks_data

import (
	models "github.com/leodip/goiabada/core/models"
	mock "github.com/stretchr/testify/mock"

	sql "database/sql"

	time "time"
)

// Database is an autogenerated mock type for the Database type
type Database struct {
	mock.Mock
}

// BeginTransaction provides a mock function with given fields:
func (_m *Database) BeginTransaction() (*sql.Tx, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for BeginTransaction")
	}

	var r0 *sql.Tx
	var r1 error
	if rf, ok := ret.Get(0).(func() (*sql.Tx, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *sql.Tx); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*sql.Tx)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClientLoadPermissions provides a mock function with given fields: tx, client
func (_m *Database) ClientLoadPermissions(tx *sql.Tx, client *models.Client) error {
	ret := _m.Called(tx, client)

	if len(ret) == 0 {
		panic("no return value specified for ClientLoadPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Client) error); ok {
		r0 = rf(tx, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientLoadRedirectURIs provides a mock function with given fields: tx, client
func (_m *Database) ClientLoadRedirectURIs(tx *sql.Tx, client *models.Client) error {
	ret := _m.Called(tx, client)

	if len(ret) == 0 {
		panic("no return value specified for ClientLoadRedirectURIs")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Client) error); ok {
		r0 = rf(tx, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ClientLoadWebOrigins provides a mock function with given fields: tx, client
func (_m *Database) ClientLoadWebOrigins(tx *sql.Tx, client *models.Client) error {
	ret := _m.Called(tx, client)

	if len(ret) == 0 {
		panic("no return value specified for ClientLoadWebOrigins")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Client) error); ok {
		r0 = rf(tx, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CodeLoadClient provides a mock function with given fields: tx, code
func (_m *Database) CodeLoadClient(tx *sql.Tx, code *models.Code) error {
	ret := _m.Called(tx, code)

	if len(ret) == 0 {
		panic("no return value specified for CodeLoadClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Code) error); ok {
		r0 = rf(tx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CodeLoadUser provides a mock function with given fields: tx, code
func (_m *Database) CodeLoadUser(tx *sql.Tx, code *models.Code) error {
	ret := _m.Called(tx, code)

	if len(ret) == 0 {
		panic("no return value specified for CodeLoadUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Code) error); ok {
		r0 = rf(tx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CommitTransaction provides a mock function with given fields: tx
func (_m *Database) CommitTransaction(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for CommitTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CountGroupMembers provides a mock function with given fields: tx, groupId
func (_m *Database) CountGroupMembers(tx *sql.Tx, groupId int64) (int, error) {
	ret := _m.Called(tx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for CountGroupMembers")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (int, error)); ok {
		return rf(tx, groupId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) int); ok {
		r0 = rf(tx, groupId)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateClient provides a mock function with given fields: tx, client
func (_m *Database) CreateClient(tx *sql.Tx, client *models.Client) error {
	ret := _m.Called(tx, client)

	if len(ret) == 0 {
		panic("no return value specified for CreateClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Client) error); ok {
		r0 = rf(tx, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateClientPermission provides a mock function with given fields: tx, clientPermission
func (_m *Database) CreateClientPermission(tx *sql.Tx, clientPermission *models.ClientPermission) error {
	ret := _m.Called(tx, clientPermission)

	if len(ret) == 0 {
		panic("no return value specified for CreateClientPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.ClientPermission) error); ok {
		r0 = rf(tx, clientPermission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateCode provides a mock function with given fields: tx, code
func (_m *Database) CreateCode(tx *sql.Tx, code *models.Code) error {
	ret := _m.Called(tx, code)

	if len(ret) == 0 {
		panic("no return value specified for CreateCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Code) error); ok {
		r0 = rf(tx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGroup provides a mock function with given fields: tx, group
func (_m *Database) CreateGroup(tx *sql.Tx, group *models.Group) error {
	ret := _m.Called(tx, group)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Group) error); ok {
		r0 = rf(tx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGroupAttribute provides a mock function with given fields: tx, groupAttribute
func (_m *Database) CreateGroupAttribute(tx *sql.Tx, groupAttribute *models.GroupAttribute) error {
	ret := _m.Called(tx, groupAttribute)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupAttribute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.GroupAttribute) error); ok {
		r0 = rf(tx, groupAttribute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateGroupPermission provides a mock function with given fields: tx, groupPermission
func (_m *Database) CreateGroupPermission(tx *sql.Tx, groupPermission *models.GroupPermission) error {
	ret := _m.Called(tx, groupPermission)

	if len(ret) == 0 {
		panic("no return value specified for CreateGroupPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.GroupPermission) error); ok {
		r0 = rf(tx, groupPermission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateHttpSession provides a mock function with given fields: tx, httpSession
func (_m *Database) CreateHttpSession(tx *sql.Tx, httpSession *models.HttpSession) error {
	ret := _m.Called(tx, httpSession)

	if len(ret) == 0 {
		panic("no return value specified for CreateHttpSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.HttpSession) error); ok {
		r0 = rf(tx, httpSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateKeyPair provides a mock function with given fields: tx, keyPair
func (_m *Database) CreateKeyPair(tx *sql.Tx, keyPair *models.KeyPair) error {
	ret := _m.Called(tx, keyPair)

	if len(ret) == 0 {
		panic("no return value specified for CreateKeyPair")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.KeyPair) error); ok {
		r0 = rf(tx, keyPair)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePermission provides a mock function with given fields: tx, permission
func (_m *Database) CreatePermission(tx *sql.Tx, permission *models.Permission) error {
	ret := _m.Called(tx, permission)

	if len(ret) == 0 {
		panic("no return value specified for CreatePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Permission) error); ok {
		r0 = rf(tx, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreatePreRegistration provides a mock function with given fields: tx, preRegistration
func (_m *Database) CreatePreRegistration(tx *sql.Tx, preRegistration *models.PreRegistration) error {
	ret := _m.Called(tx, preRegistration)

	if len(ret) == 0 {
		panic("no return value specified for CreatePreRegistration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.PreRegistration) error); ok {
		r0 = rf(tx, preRegistration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRedirectURI provides a mock function with given fields: tx, redirectURI
func (_m *Database) CreateRedirectURI(tx *sql.Tx, redirectURI *models.RedirectURI) error {
	ret := _m.Called(tx, redirectURI)

	if len(ret) == 0 {
		panic("no return value specified for CreateRedirectURI")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.RedirectURI) error); ok {
		r0 = rf(tx, redirectURI)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateRefreshToken provides a mock function with given fields: tx, refreshToken
func (_m *Database) CreateRefreshToken(tx *sql.Tx, refreshToken *models.RefreshToken) error {
	ret := _m.Called(tx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for CreateRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.RefreshToken) error); ok {
		r0 = rf(tx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateResource provides a mock function with given fields: tx, resource
func (_m *Database) CreateResource(tx *sql.Tx, resource *models.Resource) error {
	ret := _m.Called(tx, resource)

	if len(ret) == 0 {
		panic("no return value specified for CreateResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Resource) error); ok {
		r0 = rf(tx, resource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateSettings provides a mock function with given fields: tx, settings
func (_m *Database) CreateSettings(tx *sql.Tx, settings *models.Settings) error {
	ret := _m.Called(tx, settings)

	if len(ret) == 0 {
		panic("no return value specified for CreateSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Settings) error); ok {
		r0 = rf(tx, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: tx, user
func (_m *Database) CreateUser(tx *sql.Tx, user *models.User) error {
	ret := _m.Called(tx, user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.User) error); ok {
		r0 = rf(tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserAttribute provides a mock function with given fields: tx, userAttribute
func (_m *Database) CreateUserAttribute(tx *sql.Tx, userAttribute *models.UserAttribute) error {
	ret := _m.Called(tx, userAttribute)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserAttribute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserAttribute) error); ok {
		r0 = rf(tx, userAttribute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserConsent provides a mock function with given fields: tx, userConsent
func (_m *Database) CreateUserConsent(tx *sql.Tx, userConsent *models.UserConsent) error {
	ret := _m.Called(tx, userConsent)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserConsent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserConsent) error); ok {
		r0 = rf(tx, userConsent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserGroup provides a mock function with given fields: tx, userGroup
func (_m *Database) CreateUserGroup(tx *sql.Tx, userGroup *models.UserGroup) error {
	ret := _m.Called(tx, userGroup)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserGroup) error); ok {
		r0 = rf(tx, userGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserPermission provides a mock function with given fields: tx, userPermission
func (_m *Database) CreateUserPermission(tx *sql.Tx, userPermission *models.UserPermission) error {
	ret := _m.Called(tx, userPermission)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserPermission) error); ok {
		r0 = rf(tx, userPermission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserSession provides a mock function with given fields: tx, userSession
func (_m *Database) CreateUserSession(tx *sql.Tx, userSession *models.UserSession) error {
	ret := _m.Called(tx, userSession)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserSession) error); ok {
		r0 = rf(tx, userSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUserSessionClient provides a mock function with given fields: tx, userSessionClient
func (_m *Database) CreateUserSessionClient(tx *sql.Tx, userSessionClient *models.UserSessionClient) error {
	ret := _m.Called(tx, userSessionClient)

	if len(ret) == 0 {
		panic("no return value specified for CreateUserSessionClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserSessionClient) error); ok {
		r0 = rf(tx, userSessionClient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateWebOrigin provides a mock function with given fields: tx, webOrigin
func (_m *Database) CreateWebOrigin(tx *sql.Tx, webOrigin *models.WebOrigin) error {
	ret := _m.Called(tx, webOrigin)

	if len(ret) == 0 {
		panic("no return value specified for CreateWebOrigin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.WebOrigin) error); ok {
		r0 = rf(tx, webOrigin)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAllUserConsent provides a mock function with given fields: tx
func (_m *Database) DeleteAllUserConsent(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteAllUserConsent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClient provides a mock function with given fields: tx, clientId
func (_m *Database) DeleteClient(tx *sql.Tx, clientId int64) error {
	ret := _m.Called(tx, clientId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, clientId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteClientPermission provides a mock function with given fields: tx, clientPermissionId
func (_m *Database) DeleteClientPermission(tx *sql.Tx, clientPermissionId int64) error {
	ret := _m.Called(tx, clientPermissionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteClientPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, clientPermissionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCode provides a mock function with given fields: tx, codeId
func (_m *Database) DeleteCode(tx *sql.Tx, codeId int64) error {
	ret := _m.Called(tx, codeId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, codeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredOrRevokedRefreshTokens provides a mock function with given fields: tx
func (_m *Database) DeleteExpiredOrRevokedRefreshTokens(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredOrRevokedRefreshTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteExpiredSessions provides a mock function with given fields: tx, maxLifetime
func (_m *Database) DeleteExpiredSessions(tx *sql.Tx, maxLifetime time.Duration) error {
	ret := _m.Called(tx, maxLifetime)

	if len(ret) == 0 {
		panic("no return value specified for DeleteExpiredSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, time.Duration) error); ok {
		r0 = rf(tx, maxLifetime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroup provides a mock function with given fields: tx, groupId
func (_m *Database) DeleteGroup(tx *sql.Tx, groupId int64) error {
	ret := _m.Called(tx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, groupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroupAttribute provides a mock function with given fields: tx, groupAttributeId
func (_m *Database) DeleteGroupAttribute(tx *sql.Tx, groupAttributeId int64) error {
	ret := _m.Called(tx, groupAttributeId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupAttribute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, groupAttributeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteGroupPermission provides a mock function with given fields: tx, groupPermissionId
func (_m *Database) DeleteGroupPermission(tx *sql.Tx, groupPermissionId int64) error {
	ret := _m.Called(tx, groupPermissionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteGroupPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, groupPermissionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteHttpSession provides a mock function with given fields: tx, httpSessionId
func (_m *Database) DeleteHttpSession(tx *sql.Tx, httpSessionId int64) error {
	ret := _m.Called(tx, httpSessionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHttpSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, httpSessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteHttpSessionExpired provides a mock function with given fields: tx
func (_m *Database) DeleteHttpSessionExpired(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteHttpSessionExpired")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteIdleSessions provides a mock function with given fields: tx, idleTimeout
func (_m *Database) DeleteIdleSessions(tx *sql.Tx, idleTimeout time.Duration) error {
	ret := _m.Called(tx, idleTimeout)

	if len(ret) == 0 {
		panic("no return value specified for DeleteIdleSessions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, time.Duration) error); ok {
		r0 = rf(tx, idleTimeout)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteKeyPair provides a mock function with given fields: tx, keyPairId
func (_m *Database) DeleteKeyPair(tx *sql.Tx, keyPairId int64) error {
	ret := _m.Called(tx, keyPairId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteKeyPair")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, keyPairId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePermission provides a mock function with given fields: tx, permissionId
func (_m *Database) DeletePermission(tx *sql.Tx, permissionId int64) error {
	ret := _m.Called(tx, permissionId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, permissionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeletePreRegistration provides a mock function with given fields: tx, preRegistrationId
func (_m *Database) DeletePreRegistration(tx *sql.Tx, preRegistrationId int64) error {
	ret := _m.Called(tx, preRegistrationId)

	if len(ret) == 0 {
		panic("no return value specified for DeletePreRegistration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, preRegistrationId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRedirectURI provides a mock function with given fields: tx, redirectURIId
func (_m *Database) DeleteRedirectURI(tx *sql.Tx, redirectURIId int64) error {
	ret := _m.Called(tx, redirectURIId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRedirectURI")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, redirectURIId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRefreshToken provides a mock function with given fields: tx, refreshTokenId
func (_m *Database) DeleteRefreshToken(tx *sql.Tx, refreshTokenId int64) error {
	ret := _m.Called(tx, refreshTokenId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, refreshTokenId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteResource provides a mock function with given fields: tx, resourceId
func (_m *Database) DeleteResource(tx *sql.Tx, resourceId int64) error {
	ret := _m.Called(tx, resourceId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, resourceId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUsedCodesWithoutRefreshTokens provides a mock function with given fields: tx
func (_m *Database) DeleteUsedCodesWithoutRefreshTokens(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUsedCodesWithoutRefreshTokens")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUser provides a mock function with given fields: tx, userId
func (_m *Database) DeleteUser(tx *sql.Tx, userId int64) error {
	ret := _m.Called(tx, userId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, userId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserAttribute provides a mock function with given fields: tx, userAttributeId
func (_m *Database) DeleteUserAttribute(tx *sql.Tx, userAttributeId int64) error {
	ret := _m.Called(tx, userAttributeId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserAttribute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, userAttributeId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserConsent provides a mock function with given fields: tx, userConsentId
func (_m *Database) DeleteUserConsent(tx *sql.Tx, userConsentId int64) error {
	ret := _m.Called(tx, userConsentId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserConsent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, userConsentId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserGroup provides a mock function with given fields: tx, userGroupId
func (_m *Database) DeleteUserGroup(tx *sql.Tx, userGroupId int64) error {
	ret := _m.Called(tx, userGroupId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, userGroupId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserPermission provides a mock function with given fields: tx, userPermissionId
func (_m *Database) DeleteUserPermission(tx *sql.Tx, userPermissionId int64) error {
	ret := _m.Called(tx, userPermissionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, userPermissionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserSession provides a mock function with given fields: tx, userSessionId
func (_m *Database) DeleteUserSession(tx *sql.Tx, userSessionId int64) error {
	ret := _m.Called(tx, userSessionId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, userSessionId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserSessionClient provides a mock function with given fields: tx, userSessionClientId
func (_m *Database) DeleteUserSessionClient(tx *sql.Tx, userSessionClientId int64) error {
	ret := _m.Called(tx, userSessionClientId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserSessionClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, userSessionClientId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteWebOrigin provides a mock function with given fields: tx, webOriginId
func (_m *Database) DeleteWebOrigin(tx *sql.Tx, webOriginId int64) error {
	ret := _m.Called(tx, webOriginId)

	if len(ret) == 0 {
		panic("no return value specified for DeleteWebOrigin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) error); ok {
		r0 = rf(tx, webOriginId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllClients provides a mock function with given fields: tx
func (_m *Database) GetAllClients(tx *sql.Tx) ([]models.Client, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllClients")
	}

	var r0 []models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) ([]models.Client, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) []models.Client); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGroups provides a mock function with given fields: tx
func (_m *Database) GetAllGroups(tx *sql.Tx) ([]models.Group, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroups")
	}

	var r0 []models.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) ([]models.Group, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) []models.Group); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllGroupsPaginated provides a mock function with given fields: tx, page, pageSize
func (_m *Database) GetAllGroupsPaginated(tx *sql.Tx, page int, pageSize int) ([]models.Group, int, error) {
	ret := _m.Called(tx, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetAllGroupsPaginated")
	}

	var r0 []models.Group
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int, int) ([]models.Group, int, error)); ok {
		return rf(tx, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int, int) []models.Group); ok {
		r0 = rf(tx, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int, int) int); ok {
		r1 = rf(tx, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*sql.Tx, int, int) error); ok {
		r2 = rf(tx, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetAllResources provides a mock function with given fields: tx
func (_m *Database) GetAllResources(tx *sql.Tx) ([]models.Resource, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllResources")
	}

	var r0 []models.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) ([]models.Resource, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) []models.Resource); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllSigningKeys provides a mock function with given fields: tx
func (_m *Database) GetAllSigningKeys(tx *sql.Tx) ([]models.KeyPair, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllSigningKeys")
	}

	var r0 []models.KeyPair
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) ([]models.KeyPair, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) []models.KeyPair); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.KeyPair)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllWebOrigins provides a mock function with given fields: tx
func (_m *Database) GetAllWebOrigins(tx *sql.Tx) ([]models.WebOrigin, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllWebOrigins")
	}

	var r0 []models.WebOrigin
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) ([]models.WebOrigin, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) []models.WebOrigin); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WebOrigin)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientByClientIdentifier provides a mock function with given fields: tx, clientIdentifier
func (_m *Database) GetClientByClientIdentifier(tx *sql.Tx, clientIdentifier string) (*models.Client, error) {
	ret := _m.Called(tx, clientIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetClientByClientIdentifier")
	}

	var r0 *models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) (*models.Client, error)); ok {
		return rf(tx, clientIdentifier)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) *models.Client); ok {
		r0 = rf(tx, clientIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string) error); ok {
		r1 = rf(tx, clientIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientById provides a mock function with given fields: tx, clientId
func (_m *Database) GetClientById(tx *sql.Tx, clientId int64) (*models.Client, error) {
	ret := _m.Called(tx, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetClientById")
	}

	var r0 *models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.Client, error)); ok {
		return rf(tx, clientId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.Client); ok {
		r0 = rf(tx, clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientPermissionByClientIdAndPermissionId provides a mock function with given fields: tx, clientId, permissionId
func (_m *Database) GetClientPermissionByClientIdAndPermissionId(tx *sql.Tx, clientId int64, permissionId int64) (*models.ClientPermission, error) {
	ret := _m.Called(tx, clientId, permissionId)

	if len(ret) == 0 {
		panic("no return value specified for GetClientPermissionByClientIdAndPermissionId")
	}

	var r0 *models.ClientPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) (*models.ClientPermission, error)); ok {
		return rf(tx, clientId, permissionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) *models.ClientPermission); ok {
		r0 = rf(tx, clientId, permissionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ClientPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64, int64) error); ok {
		r1 = rf(tx, clientId, permissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientPermissionById provides a mock function with given fields: tx, clientPermissionId
func (_m *Database) GetClientPermissionById(tx *sql.Tx, clientPermissionId int64) (*models.ClientPermission, error) {
	ret := _m.Called(tx, clientPermissionId)

	if len(ret) == 0 {
		panic("no return value specified for GetClientPermissionById")
	}

	var r0 *models.ClientPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.ClientPermission, error)); ok {
		return rf(tx, clientPermissionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.ClientPermission); ok {
		r0 = rf(tx, clientPermissionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ClientPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, clientPermissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientPermissionsByClientId provides a mock function with given fields: tx, clientId
func (_m *Database) GetClientPermissionsByClientId(tx *sql.Tx, clientId int64) ([]models.ClientPermission, error) {
	ret := _m.Called(tx, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetClientPermissionsByClientId")
	}

	var r0 []models.ClientPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.ClientPermission, error)); ok {
		return rf(tx, clientId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.ClientPermission); ok {
		r0 = rf(tx, clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ClientPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetClientsByIds provides a mock function with given fields: tx, clientIds
func (_m *Database) GetClientsByIds(tx *sql.Tx, clientIds []int64) ([]models.Client, error) {
	ret := _m.Called(tx, clientIds)

	if len(ret) == 0 {
		panic("no return value specified for GetClientsByIds")
	}

	var r0 []models.Client
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.Client, error)); ok {
		return rf(tx, clientIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.Client); ok {
		r0 = rf(tx, clientIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Client)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, clientIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCodeByCodeHash provides a mock function with given fields: tx, codeHash, used
func (_m *Database) GetCodeByCodeHash(tx *sql.Tx, codeHash string, used bool) (*models.Code, error) {
	ret := _m.Called(tx, codeHash, used)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeByCodeHash")
	}

	var r0 *models.Code
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string, bool) (*models.Code, error)); ok {
		return rf(tx, codeHash, used)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string, bool) *models.Code); ok {
		r0 = rf(tx, codeHash, used)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string, bool) error); ok {
		r1 = rf(tx, codeHash, used)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCodeById provides a mock function with given fields: tx, codeId
func (_m *Database) GetCodeById(tx *sql.Tx, codeId int64) (*models.Code, error) {
	ret := _m.Called(tx, codeId)

	if len(ret) == 0 {
		panic("no return value specified for GetCodeById")
	}

	var r0 *models.Code
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.Code, error)); ok {
		return rf(tx, codeId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.Code); ok {
		r0 = rf(tx, codeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, codeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsentByUserIdAndClientId provides a mock function with given fields: tx, userId, clientId
func (_m *Database) GetConsentByUserIdAndClientId(tx *sql.Tx, userId int64, clientId int64) (*models.UserConsent, error) {
	ret := _m.Called(tx, userId, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetConsentByUserIdAndClientId")
	}

	var r0 *models.UserConsent
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) (*models.UserConsent, error)); ok {
		return rf(tx, userId, clientId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) *models.UserConsent); ok {
		r0 = rf(tx, userId, clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserConsent)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64, int64) error); ok {
		r1 = rf(tx, userId, clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetConsentsByUserId provides a mock function with given fields: tx, userId
func (_m *Database) GetConsentsByUserId(tx *sql.Tx, userId int64) ([]models.UserConsent, error) {
	ret := _m.Called(tx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetConsentsByUserId")
	}

	var r0 []models.UserConsent
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.UserConsent, error)); ok {
		return rf(tx, userId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.UserConsent); ok {
		r0 = rf(tx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserConsent)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetCurrentSigningKey provides a mock function with given fields: tx
func (_m *Database) GetCurrentSigningKey(tx *sql.Tx) (*models.KeyPair, error) {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for GetCurrentSigningKey")
	}

	var r0 *models.KeyPair
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) (*models.KeyPair, error)); ok {
		return rf(tx)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx) *models.KeyPair); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.KeyPair)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx) error); ok {
		r1 = rf(tx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupAttributeById provides a mock function with given fields: tx, groupAttributeId
func (_m *Database) GetGroupAttributeById(tx *sql.Tx, groupAttributeId int64) (*models.GroupAttribute, error) {
	ret := _m.Called(tx, groupAttributeId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupAttributeById")
	}

	var r0 *models.GroupAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.GroupAttribute, error)); ok {
		return rf(tx, groupAttributeId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.GroupAttribute); ok {
		r0 = rf(tx, groupAttributeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GroupAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, groupAttributeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupAttributesByGroupId provides a mock function with given fields: tx, groupId
func (_m *Database) GetGroupAttributesByGroupId(tx *sql.Tx, groupId int64) ([]models.GroupAttribute, error) {
	ret := _m.Called(tx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupAttributesByGroupId")
	}

	var r0 []models.GroupAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.GroupAttribute, error)); ok {
		return rf(tx, groupId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.GroupAttribute); ok {
		r0 = rf(tx, groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GroupAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupAttributesByGroupIds provides a mock function with given fields: tx, groupIds
func (_m *Database) GetGroupAttributesByGroupIds(tx *sql.Tx, groupIds []int64) ([]models.GroupAttribute, error) {
	ret := _m.Called(tx, groupIds)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupAttributesByGroupIds")
	}

	var r0 []models.GroupAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.GroupAttribute, error)); ok {
		return rf(tx, groupIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.GroupAttribute); ok {
		r0 = rf(tx, groupIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GroupAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, groupIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupByGroupIdentifier provides a mock function with given fields: tx, groupIdentifier
func (_m *Database) GetGroupByGroupIdentifier(tx *sql.Tx, groupIdentifier string) (*models.Group, error) {
	ret := _m.Called(tx, groupIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupByGroupIdentifier")
	}

	var r0 *models.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) (*models.Group, error)); ok {
		return rf(tx, groupIdentifier)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) *models.Group); ok {
		r0 = rf(tx, groupIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string) error); ok {
		r1 = rf(tx, groupIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupById provides a mock function with given fields: tx, groupId
func (_m *Database) GetGroupById(tx *sql.Tx, groupId int64) (*models.Group, error) {
	ret := _m.Called(tx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupById")
	}

	var r0 *models.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.Group, error)); ok {
		return rf(tx, groupId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.Group); ok {
		r0 = rf(tx, groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupMembersPaginated provides a mock function with given fields: tx, groupId, page, pageSize
func (_m *Database) GetGroupMembersPaginated(tx *sql.Tx, groupId int64, page int, pageSize int) ([]models.User, int, error) {
	ret := _m.Called(tx, groupId, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupMembersPaginated")
	}

	var r0 []models.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int, int) ([]models.User, int, error)); ok {
		return rf(tx, groupId, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int, int) []models.User); ok {
		r0 = rf(tx, groupId, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64, int, int) int); ok {
		r1 = rf(tx, groupId, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*sql.Tx, int64, int, int) error); ok {
		r2 = rf(tx, groupId, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetGroupPermissionByGroupIdAndPermissionId provides a mock function with given fields: tx, groupId, permissionId
func (_m *Database) GetGroupPermissionByGroupIdAndPermissionId(tx *sql.Tx, groupId int64, permissionId int64) (*models.GroupPermission, error) {
	ret := _m.Called(tx, groupId, permissionId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupPermissionByGroupIdAndPermissionId")
	}

	var r0 *models.GroupPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) (*models.GroupPermission, error)); ok {
		return rf(tx, groupId, permissionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) *models.GroupPermission); ok {
		r0 = rf(tx, groupId, permissionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GroupPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64, int64) error); ok {
		r1 = rf(tx, groupId, permissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupPermissionById provides a mock function with given fields: tx, groupPermissionId
func (_m *Database) GetGroupPermissionById(tx *sql.Tx, groupPermissionId int64) (*models.GroupPermission, error) {
	ret := _m.Called(tx, groupPermissionId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupPermissionById")
	}

	var r0 *models.GroupPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.GroupPermission, error)); ok {
		return rf(tx, groupPermissionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.GroupPermission); ok {
		r0 = rf(tx, groupPermissionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.GroupPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, groupPermissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupPermissionsByGroupId provides a mock function with given fields: tx, groupId
func (_m *Database) GetGroupPermissionsByGroupId(tx *sql.Tx, groupId int64) ([]models.GroupPermission, error) {
	ret := _m.Called(tx, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupPermissionsByGroupId")
	}

	var r0 []models.GroupPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.GroupPermission, error)); ok {
		return rf(tx, groupId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.GroupPermission); ok {
		r0 = rf(tx, groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GroupPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupPermissionsByGroupIds provides a mock function with given fields: tx, groupIds
func (_m *Database) GetGroupPermissionsByGroupIds(tx *sql.Tx, groupIds []int64) ([]models.GroupPermission, error) {
	ret := _m.Called(tx, groupIds)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupPermissionsByGroupIds")
	}

	var r0 []models.GroupPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.GroupPermission, error)); ok {
		return rf(tx, groupIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.GroupPermission); ok {
		r0 = rf(tx, groupIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.GroupPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, groupIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetGroupsByIds provides a mock function with given fields: tx, groupIds
func (_m *Database) GetGroupsByIds(tx *sql.Tx, groupIds []int64) ([]models.Group, error) {
	ret := _m.Called(tx, groupIds)

	if len(ret) == 0 {
		panic("no return value specified for GetGroupsByIds")
	}

	var r0 []models.Group
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.Group, error)); ok {
		return rf(tx, groupIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.Group); ok {
		r0 = rf(tx, groupIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Group)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, groupIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetHttpSessionById provides a mock function with given fields: tx, httpSessionId
func (_m *Database) GetHttpSessionById(tx *sql.Tx, httpSessionId int64) (*models.HttpSession, error) {
	ret := _m.Called(tx, httpSessionId)

	if len(ret) == 0 {
		panic("no return value specified for GetHttpSessionById")
	}

	var r0 *models.HttpSession
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.HttpSession, error)); ok {
		return rf(tx, httpSessionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.HttpSession); ok {
		r0 = rf(tx, httpSessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.HttpSession)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, httpSessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetKeyPairById provides a mock function with given fields: tx, keyPairId
func (_m *Database) GetKeyPairById(tx *sql.Tx, keyPairId int64) (*models.KeyPair, error) {
	ret := _m.Called(tx, keyPairId)

	if len(ret) == 0 {
		panic("no return value specified for GetKeyPairById")
	}

	var r0 *models.KeyPair
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.KeyPair, error)); ok {
		return rf(tx, keyPairId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.KeyPair); ok {
		r0 = rf(tx, keyPairId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.KeyPair)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, keyPairId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLastUserWithOTPState provides a mock function with given fields: tx, otpEnabledState
func (_m *Database) GetLastUserWithOTPState(tx *sql.Tx, otpEnabledState bool) (*models.User, error) {
	ret := _m.Called(tx, otpEnabledState)

	if len(ret) == 0 {
		panic("no return value specified for GetLastUserWithOTPState")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, bool) (*models.User, error)); ok {
		return rf(tx, otpEnabledState)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, bool) *models.User); ok {
		r0 = rf(tx, otpEnabledState)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, bool) error); ok {
		r1 = rf(tx, otpEnabledState)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionById provides a mock function with given fields: tx, permissionId
func (_m *Database) GetPermissionById(tx *sql.Tx, permissionId int64) (*models.Permission, error) {
	ret := _m.Called(tx, permissionId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionById")
	}

	var r0 *models.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.Permission, error)); ok {
		return rf(tx, permissionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.Permission); ok {
		r0 = rf(tx, permissionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, permissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionsByIds provides a mock function with given fields: tx, permissionIds
func (_m *Database) GetPermissionsByIds(tx *sql.Tx, permissionIds []int64) ([]models.Permission, error) {
	ret := _m.Called(tx, permissionIds)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByIds")
	}

	var r0 []models.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.Permission, error)); ok {
		return rf(tx, permissionIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.Permission); ok {
		r0 = rf(tx, permissionIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, permissionIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPermissionsByResourceId provides a mock function with given fields: tx, resourceId
func (_m *Database) GetPermissionsByResourceId(tx *sql.Tx, resourceId int64) ([]models.Permission, error) {
	ret := _m.Called(tx, resourceId)

	if len(ret) == 0 {
		panic("no return value specified for GetPermissionsByResourceId")
	}

	var r0 []models.Permission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.Permission, error)); ok {
		return rf(tx, resourceId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.Permission); ok {
		r0 = rf(tx, resourceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Permission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, resourceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreRegistrationByEmail provides a mock function with given fields: tx, email
func (_m *Database) GetPreRegistrationByEmail(tx *sql.Tx, email string) (*models.PreRegistration, error) {
	ret := _m.Called(tx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetPreRegistrationByEmail")
	}

	var r0 *models.PreRegistration
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) (*models.PreRegistration, error)); ok {
		return rf(tx, email)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) *models.PreRegistration); ok {
		r0 = rf(tx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PreRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string) error); ok {
		r1 = rf(tx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetPreRegistrationById provides a mock function with given fields: tx, preRegistrationId
func (_m *Database) GetPreRegistrationById(tx *sql.Tx, preRegistrationId int64) (*models.PreRegistration, error) {
	ret := _m.Called(tx, preRegistrationId)

	if len(ret) == 0 {
		panic("no return value specified for GetPreRegistrationById")
	}

	var r0 *models.PreRegistration
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.PreRegistration, error)); ok {
		return rf(tx, preRegistrationId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.PreRegistration); ok {
		r0 = rf(tx, preRegistrationId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.PreRegistration)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, preRegistrationId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRedirectURIById provides a mock function with given fields: tx, redirectURIId
func (_m *Database) GetRedirectURIById(tx *sql.Tx, redirectURIId int64) (*models.RedirectURI, error) {
	ret := _m.Called(tx, redirectURIId)

	if len(ret) == 0 {
		panic("no return value specified for GetRedirectURIById")
	}

	var r0 *models.RedirectURI
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.RedirectURI, error)); ok {
		return rf(tx, redirectURIId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.RedirectURI); ok {
		r0 = rf(tx, redirectURIId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RedirectURI)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, redirectURIId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRedirectURIsByClientId provides a mock function with given fields: tx, clientId
func (_m *Database) GetRedirectURIsByClientId(tx *sql.Tx, clientId int64) ([]models.RedirectURI, error) {
	ret := _m.Called(tx, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetRedirectURIsByClientId")
	}

	var r0 []models.RedirectURI
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.RedirectURI, error)); ok {
		return rf(tx, clientId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.RedirectURI); ok {
		r0 = rf(tx, clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.RedirectURI)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshTokenById provides a mock function with given fields: tx, refreshTokenId
func (_m *Database) GetRefreshTokenById(tx *sql.Tx, refreshTokenId int64) (*models.RefreshToken, error) {
	ret := _m.Called(tx, refreshTokenId)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshTokenById")
	}

	var r0 *models.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.RefreshToken, error)); ok {
		return rf(tx, refreshTokenId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.RefreshToken); ok {
		r0 = rf(tx, refreshTokenId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, refreshTokenId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRefreshTokenByJti provides a mock function with given fields: tx, jti
func (_m *Database) GetRefreshTokenByJti(tx *sql.Tx, jti string) (*models.RefreshToken, error) {
	ret := _m.Called(tx, jti)

	if len(ret) == 0 {
		panic("no return value specified for GetRefreshTokenByJti")
	}

	var r0 *models.RefreshToken
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) (*models.RefreshToken, error)); ok {
		return rf(tx, jti)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) *models.RefreshToken); ok {
		r0 = rf(tx, jti)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.RefreshToken)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string) error); ok {
		r1 = rf(tx, jti)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceById provides a mock function with given fields: tx, resourceId
func (_m *Database) GetResourceById(tx *sql.Tx, resourceId int64) (*models.Resource, error) {
	ret := _m.Called(tx, resourceId)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceById")
	}

	var r0 *models.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.Resource, error)); ok {
		return rf(tx, resourceId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.Resource); ok {
		r0 = rf(tx, resourceId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, resourceId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourceByResourceIdentifier provides a mock function with given fields: tx, resourceIdentifier
func (_m *Database) GetResourceByResourceIdentifier(tx *sql.Tx, resourceIdentifier string) (*models.Resource, error) {
	ret := _m.Called(tx, resourceIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceByResourceIdentifier")
	}

	var r0 *models.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) (*models.Resource, error)); ok {
		return rf(tx, resourceIdentifier)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) *models.Resource); ok {
		r0 = rf(tx, resourceIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string) error); ok {
		r1 = rf(tx, resourceIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetResourcesByIds provides a mock function with given fields: tx, resourceIds
func (_m *Database) GetResourcesByIds(tx *sql.Tx, resourceIds []int64) ([]models.Resource, error) {
	ret := _m.Called(tx, resourceIds)

	if len(ret) == 0 {
		panic("no return value specified for GetResourcesByIds")
	}

	var r0 []models.Resource
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.Resource, error)); ok {
		return rf(tx, resourceIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.Resource); ok {
		r0 = rf(tx, resourceIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Resource)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, resourceIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSettingsById provides a mock function with given fields: tx, settingsId
func (_m *Database) GetSettingsById(tx *sql.Tx, settingsId int64) (*models.Settings, error) {
	ret := _m.Called(tx, settingsId)

	if len(ret) == 0 {
		panic("no return value specified for GetSettingsById")
	}

	var r0 *models.Settings
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.Settings, error)); ok {
		return rf(tx, settingsId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.Settings); ok {
		r0 = rf(tx, settingsId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Settings)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, settingsId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAttributeById provides a mock function with given fields: tx, userAttributeId
func (_m *Database) GetUserAttributeById(tx *sql.Tx, userAttributeId int64) (*models.UserAttribute, error) {
	ret := _m.Called(tx, userAttributeId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAttributeById")
	}

	var r0 *models.UserAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.UserAttribute, error)); ok {
		return rf(tx, userAttributeId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.UserAttribute); ok {
		r0 = rf(tx, userAttributeId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userAttributeId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserAttributesByUserId provides a mock function with given fields: tx, userId
func (_m *Database) GetUserAttributesByUserId(tx *sql.Tx, userId int64) ([]models.UserAttribute, error) {
	ret := _m.Called(tx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserAttributesByUserId")
	}

	var r0 []models.UserAttribute
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.UserAttribute, error)); ok {
		return rf(tx, userId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.UserAttribute); ok {
		r0 = rf(tx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserAttribute)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByEmail provides a mock function with given fields: tx, email
func (_m *Database) GetUserByEmail(tx *sql.Tx, email string) (*models.User, error) {
	ret := _m.Called(tx, email)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByEmail")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) (*models.User, error)); ok {
		return rf(tx, email)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) *models.User); ok {
		r0 = rf(tx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string) error); ok {
		r1 = rf(tx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserById provides a mock function with given fields: tx, userId
func (_m *Database) GetUserById(tx *sql.Tx, userId int64) (*models.User, error) {
	ret := _m.Called(tx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserById")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.User, error)); ok {
		return rf(tx, userId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.User); ok {
		r0 = rf(tx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserBySubject provides a mock function with given fields: tx, subject
func (_m *Database) GetUserBySubject(tx *sql.Tx, subject string) (*models.User, error) {
	ret := _m.Called(tx, subject)

	if len(ret) == 0 {
		panic("no return value specified for GetUserBySubject")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) (*models.User, error)); ok {
		return rf(tx, subject)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) *models.User); ok {
		r0 = rf(tx, subject)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string) error); ok {
		r1 = rf(tx, subject)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: tx, username
func (_m *Database) GetUserByUsername(tx *sql.Tx, username string) (*models.User, error) {
	ret := _m.Called(tx, username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) (*models.User, error)); ok {
		return rf(tx, username)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) *models.User); ok {
		r0 = rf(tx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string) error); ok {
		r1 = rf(tx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserConsentById provides a mock function with given fields: tx, userConsentId
func (_m *Database) GetUserConsentById(tx *sql.Tx, userConsentId int64) (*models.UserConsent, error) {
	ret := _m.Called(tx, userConsentId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserConsentById")
	}

	var r0 *models.UserConsent
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.UserConsent, error)); ok {
		return rf(tx, userConsentId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.UserConsent); ok {
		r0 = rf(tx, userConsentId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserConsent)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userConsentId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroupById provides a mock function with given fields: tx, userGroupId
func (_m *Database) GetUserGroupById(tx *sql.Tx, userGroupId int64) (*models.UserGroup, error) {
	ret := _m.Called(tx, userGroupId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroupById")
	}

	var r0 *models.UserGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.UserGroup, error)); ok {
		return rf(tx, userGroupId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.UserGroup); ok {
		r0 = rf(tx, userGroupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userGroupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroupByUserIdAndGroupId provides a mock function with given fields: tx, userId, groupId
func (_m *Database) GetUserGroupByUserIdAndGroupId(tx *sql.Tx, userId int64, groupId int64) (*models.UserGroup, error) {
	ret := _m.Called(tx, userId, groupId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroupByUserIdAndGroupId")
	}

	var r0 *models.UserGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) (*models.UserGroup, error)); ok {
		return rf(tx, userId, groupId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) *models.UserGroup); ok {
		r0 = rf(tx, userId, groupId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64, int64) error); ok {
		r1 = rf(tx, userId, groupId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroupsByUserId provides a mock function with given fields: tx, userId
func (_m *Database) GetUserGroupsByUserId(tx *sql.Tx, userId int64) ([]models.UserGroup, error) {
	ret := _m.Called(tx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroupsByUserId")
	}

	var r0 []models.UserGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.UserGroup, error)); ok {
		return rf(tx, userId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.UserGroup); ok {
		r0 = rf(tx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserGroupsByUserIds provides a mock function with given fields: tx, userIds
func (_m *Database) GetUserGroupsByUserIds(tx *sql.Tx, userIds []int64) ([]models.UserGroup, error) {
	ret := _m.Called(tx, userIds)

	if len(ret) == 0 {
		panic("no return value specified for GetUserGroupsByUserIds")
	}

	var r0 []models.UserGroup
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.UserGroup, error)); ok {
		return rf(tx, userIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.UserGroup); ok {
		r0 = rf(tx, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserGroup)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissionById provides a mock function with given fields: tx, userPermissionId
func (_m *Database) GetUserPermissionById(tx *sql.Tx, userPermissionId int64) (*models.UserPermission, error) {
	ret := _m.Called(tx, userPermissionId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissionById")
	}

	var r0 *models.UserPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.UserPermission, error)); ok {
		return rf(tx, userPermissionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.UserPermission); ok {
		r0 = rf(tx, userPermissionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userPermissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissionByUserIdAndPermissionId provides a mock function with given fields: tx, userId, permissionId
func (_m *Database) GetUserPermissionByUserIdAndPermissionId(tx *sql.Tx, userId int64, permissionId int64) (*models.UserPermission, error) {
	ret := _m.Called(tx, userId, permissionId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissionByUserIdAndPermissionId")
	}

	var r0 *models.UserPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) (*models.UserPermission, error)); ok {
		return rf(tx, userId, permissionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int64) *models.UserPermission); ok {
		r0 = rf(tx, userId, permissionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64, int64) error); ok {
		r1 = rf(tx, userId, permissionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissionsByUserId provides a mock function with given fields: tx, userId
func (_m *Database) GetUserPermissionsByUserId(tx *sql.Tx, userId int64) ([]models.UserPermission, error) {
	ret := _m.Called(tx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissionsByUserId")
	}

	var r0 []models.UserPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.UserPermission, error)); ok {
		return rf(tx, userId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.UserPermission); ok {
		r0 = rf(tx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserPermissionsByUserIds provides a mock function with given fields: tx, userIds
func (_m *Database) GetUserPermissionsByUserIds(tx *sql.Tx, userIds []int64) ([]models.UserPermission, error) {
	ret := _m.Called(tx, userIds)

	if len(ret) == 0 {
		panic("no return value specified for GetUserPermissionsByUserIds")
	}

	var r0 []models.UserPermission
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.UserPermission, error)); ok {
		return rf(tx, userIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.UserPermission); ok {
		r0 = rf(tx, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserPermission)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessionById provides a mock function with given fields: tx, userSessionId
func (_m *Database) GetUserSessionById(tx *sql.Tx, userSessionId int64) (*models.UserSession, error) {
	ret := _m.Called(tx, userSessionId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionById")
	}

	var r0 *models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.UserSession, error)); ok {
		return rf(tx, userSessionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.UserSession); ok {
		r0 = rf(tx, userSessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userSessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessionBySessionIdentifier provides a mock function with given fields: tx, sessionIdentifier
func (_m *Database) GetUserSessionBySessionIdentifier(tx *sql.Tx, sessionIdentifier string) (*models.UserSession, error) {
	ret := _m.Called(tx, sessionIdentifier)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionBySessionIdentifier")
	}

	var r0 *models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) (*models.UserSession, error)); ok {
		return rf(tx, sessionIdentifier)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string) *models.UserSession); ok {
		r0 = rf(tx, sessionIdentifier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string) error); ok {
		r1 = rf(tx, sessionIdentifier)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessionClientById provides a mock function with given fields: tx, userSessionClientId
func (_m *Database) GetUserSessionClientById(tx *sql.Tx, userSessionClientId int64) (*models.UserSessionClient, error) {
	ret := _m.Called(tx, userSessionClientId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionClientById")
	}

	var r0 *models.UserSessionClient
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.UserSessionClient, error)); ok {
		return rf(tx, userSessionClientId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.UserSessionClient); ok {
		r0 = rf(tx, userSessionClientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSessionClient)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userSessionClientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessionClientsByUserSessionId provides a mock function with given fields: tx, userSessionId
func (_m *Database) GetUserSessionClientsByUserSessionId(tx *sql.Tx, userSessionId int64) ([]models.UserSessionClient, error) {
	ret := _m.Called(tx, userSessionId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionClientsByUserSessionId")
	}

	var r0 []models.UserSessionClient
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.UserSessionClient, error)); ok {
		return rf(tx, userSessionId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.UserSessionClient); ok {
		r0 = rf(tx, userSessionId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserSessionClient)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userSessionId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessionClientsByUserSessionIds provides a mock function with given fields: tx, userSessionIds
func (_m *Database) GetUserSessionClientsByUserSessionIds(tx *sql.Tx, userSessionIds []int64) ([]models.UserSessionClient, error) {
	ret := _m.Called(tx, userSessionIds)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionClientsByUserSessionIds")
	}

	var r0 []models.UserSessionClient
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.UserSessionClient, error)); ok {
		return rf(tx, userSessionIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.UserSessionClient); ok {
		r0 = rf(tx, userSessionIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserSessionClient)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, userSessionIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessionsByClientIdPaginated provides a mock function with given fields: tx, clientId, page, pageSize
func (_m *Database) GetUserSessionsByClientIdPaginated(tx *sql.Tx, clientId int64, page int, pageSize int) ([]models.UserSession, int, error) {
	ret := _m.Called(tx, clientId, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionsByClientIdPaginated")
	}

	var r0 []models.UserSession
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int, int) ([]models.UserSession, int, error)); ok {
		return rf(tx, clientId, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int, int) []models.UserSession); ok {
		r0 = rf(tx, clientId, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64, int, int) int); ok {
		r1 = rf(tx, clientId, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*sql.Tx, int64, int, int) error); ok {
		r2 = rf(tx, clientId, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetUserSessionsByUserId provides a mock function with given fields: tx, userId
func (_m *Database) GetUserSessionsByUserId(tx *sql.Tx, userId int64) ([]models.UserSession, error) {
	ret := _m.Called(tx, userId)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionsByUserId")
	}

	var r0 []models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.UserSession, error)); ok {
		return rf(tx, userId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.UserSession); ok {
		r0 = rf(tx, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserSessionsClientByIds provides a mock function with given fields: tx, userSessionClientIds
func (_m *Database) GetUserSessionsClientByIds(tx *sql.Tx, userSessionClientIds []int64) ([]models.UserSessionClient, error) {
	ret := _m.Called(tx, userSessionClientIds)

	if len(ret) == 0 {
		panic("no return value specified for GetUserSessionsClientByIds")
	}

	var r0 []models.UserSessionClient
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) ([]models.UserSessionClient, error)); ok {
		return rf(tx, userSessionClientIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) []models.UserSessionClient); ok {
		r0 = rf(tx, userSessionClientIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.UserSessionClient)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, userSessionClientIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByIds provides a mock function with given fields: tx, userIds
func (_m *Database) GetUsersByIds(tx *sql.Tx, userIds []int64) (map[int64]models.User, error) {
	ret := _m.Called(tx, userIds)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByIds")
	}

	var r0 map[int64]models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) (map[int64]models.User, error)); ok {
		return rf(tx, userIds)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, []int64) map[int64]models.User); ok {
		r0 = rf(tx, userIds)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[int64]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, []int64) error); ok {
		r1 = rf(tx, userIds)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUsersByPermissionIdPaginated provides a mock function with given fields: tx, permissionId, page, pageSize
func (_m *Database) GetUsersByPermissionIdPaginated(tx *sql.Tx, permissionId int64, page int, pageSize int) ([]models.User, int, error) {
	ret := _m.Called(tx, permissionId, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for GetUsersByPermissionIdPaginated")
	}

	var r0 []models.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int, int) ([]models.User, int, error)); ok {
		return rf(tx, permissionId, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64, int, int) []models.User); ok {
		r0 = rf(tx, permissionId, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64, int, int) int); ok {
		r1 = rf(tx, permissionId, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*sql.Tx, int64, int, int) error); ok {
		r2 = rf(tx, permissionId, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetWebOriginById provides a mock function with given fields: tx, webOriginId
func (_m *Database) GetWebOriginById(tx *sql.Tx, webOriginId int64) (*models.WebOrigin, error) {
	ret := _m.Called(tx, webOriginId)

	if len(ret) == 0 {
		panic("no return value specified for GetWebOriginById")
	}

	var r0 *models.WebOrigin
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) (*models.WebOrigin, error)); ok {
		return rf(tx, webOriginId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) *models.WebOrigin); ok {
		r0 = rf(tx, webOriginId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.WebOrigin)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, webOriginId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWebOriginsByClientId provides a mock function with given fields: tx, clientId
func (_m *Database) GetWebOriginsByClientId(tx *sql.Tx, clientId int64) ([]models.WebOrigin, error) {
	ret := _m.Called(tx, clientId)

	if len(ret) == 0 {
		panic("no return value specified for GetWebOriginsByClientId")
	}

	var r0 []models.WebOrigin
	var r1 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) ([]models.WebOrigin, error)); ok {
		return rf(tx, clientId)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, int64) []models.WebOrigin); ok {
		r0 = rf(tx, clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.WebOrigin)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, int64) error); ok {
		r1 = rf(tx, clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GroupLoadPermissions provides a mock function with given fields: tx, group
func (_m *Database) GroupLoadPermissions(tx *sql.Tx, group *models.Group) error {
	ret := _m.Called(tx, group)

	if len(ret) == 0 {
		panic("no return value specified for GroupLoadPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Group) error); ok {
		r0 = rf(tx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupsLoadAttributes provides a mock function with given fields: tx, groups
func (_m *Database) GroupsLoadAttributes(tx *sql.Tx, groups []models.Group) error {
	ret := _m.Called(tx, groups)

	if len(ret) == 0 {
		panic("no return value specified for GroupsLoadAttributes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []models.Group) error); ok {
		r0 = rf(tx, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GroupsLoadPermissions provides a mock function with given fields: tx, groups
func (_m *Database) GroupsLoadPermissions(tx *sql.Tx, groups []models.Group) error {
	ret := _m.Called(tx, groups)

	if len(ret) == 0 {
		panic("no return value specified for GroupsLoadPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []models.Group) error); ok {
		r0 = rf(tx, groups)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsEmpty provides a mock function with given fields:
func (_m *Database) IsEmpty() (bool, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for IsEmpty")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func() (bool, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() bool); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Migrate provides a mock function with given fields:
func (_m *Database) Migrate() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Migrate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PermissionsLoadResources provides a mock function with given fields: tx, permissions
func (_m *Database) PermissionsLoadResources(tx *sql.Tx, permissions []models.Permission) error {
	ret := _m.Called(tx, permissions)

	if len(ret) == 0 {
		panic("no return value specified for PermissionsLoadResources")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []models.Permission) error); ok {
		r0 = rf(tx, permissions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RefreshTokenLoadCode provides a mock function with given fields: tx, refreshToken
func (_m *Database) RefreshTokenLoadCode(tx *sql.Tx, refreshToken *models.RefreshToken) error {
	ret := _m.Called(tx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshTokenLoadCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.RefreshToken) error); ok {
		r0 = rf(tx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RollbackTransaction provides a mock function with given fields: tx
func (_m *Database) RollbackTransaction(tx *sql.Tx) error {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for RollbackTransaction")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx) error); ok {
		r0 = rf(tx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SearchUsersPaginated provides a mock function with given fields: tx, query, page, pageSize
func (_m *Database) SearchUsersPaginated(tx *sql.Tx, query string, page int, pageSize int) ([]models.User, int, error) {
	ret := _m.Called(tx, query, page, pageSize)

	if len(ret) == 0 {
		panic("no return value specified for SearchUsersPaginated")
	}

	var r0 []models.User
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, string, int, int) ([]models.User, int, error)); ok {
		return rf(tx, query, page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(*sql.Tx, string, int, int) []models.User); ok {
		r0 = rf(tx, query, page, pageSize)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(*sql.Tx, string, int, int) int); ok {
		r1 = rf(tx, query, page, pageSize)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(*sql.Tx, string, int, int) error); ok {
		r2 = rf(tx, query, page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Seed provides a mock function with given fields:
func (_m *Database) Seed() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Seed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClient provides a mock function with given fields: tx, client
func (_m *Database) UpdateClient(tx *sql.Tx, client *models.Client) error {
	ret := _m.Called(tx, client)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Client) error); ok {
		r0 = rf(tx, client)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateClientPermission provides a mock function with given fields: tx, clientPermission
func (_m *Database) UpdateClientPermission(tx *sql.Tx, clientPermission *models.ClientPermission) error {
	ret := _m.Called(tx, clientPermission)

	if len(ret) == 0 {
		panic("no return value specified for UpdateClientPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.ClientPermission) error); ok {
		r0 = rf(tx, clientPermission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateCode provides a mock function with given fields: tx, code
func (_m *Database) UpdateCode(tx *sql.Tx, code *models.Code) error {
	ret := _m.Called(tx, code)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCode")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Code) error); ok {
		r0 = rf(tx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroup provides a mock function with given fields: tx, group
func (_m *Database) UpdateGroup(tx *sql.Tx, group *models.Group) error {
	ret := _m.Called(tx, group)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Group) error); ok {
		r0 = rf(tx, group)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroupAttribute provides a mock function with given fields: tx, groupAttribute
func (_m *Database) UpdateGroupAttribute(tx *sql.Tx, groupAttribute *models.GroupAttribute) error {
	ret := _m.Called(tx, groupAttribute)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupAttribute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.GroupAttribute) error); ok {
		r0 = rf(tx, groupAttribute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateGroupPermission provides a mock function with given fields: tx, groupPermission
func (_m *Database) UpdateGroupPermission(tx *sql.Tx, groupPermission *models.GroupPermission) error {
	ret := _m.Called(tx, groupPermission)

	if len(ret) == 0 {
		panic("no return value specified for UpdateGroupPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.GroupPermission) error); ok {
		r0 = rf(tx, groupPermission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateHttpSession provides a mock function with given fields: tx, httpSession
func (_m *Database) UpdateHttpSession(tx *sql.Tx, httpSession *models.HttpSession) error {
	ret := _m.Called(tx, httpSession)

	if len(ret) == 0 {
		panic("no return value specified for UpdateHttpSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.HttpSession) error); ok {
		r0 = rf(tx, httpSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateKeyPair provides a mock function with given fields: tx, keyPair
func (_m *Database) UpdateKeyPair(tx *sql.Tx, keyPair *models.KeyPair) error {
	ret := _m.Called(tx, keyPair)

	if len(ret) == 0 {
		panic("no return value specified for UpdateKeyPair")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.KeyPair) error); ok {
		r0 = rf(tx, keyPair)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePermission provides a mock function with given fields: tx, permission
func (_m *Database) UpdatePermission(tx *sql.Tx, permission *models.Permission) error {
	ret := _m.Called(tx, permission)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Permission) error); ok {
		r0 = rf(tx, permission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePreRegistration provides a mock function with given fields: tx, preRegistration
func (_m *Database) UpdatePreRegistration(tx *sql.Tx, preRegistration *models.PreRegistration) error {
	ret := _m.Called(tx, preRegistration)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePreRegistration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.PreRegistration) error); ok {
		r0 = rf(tx, preRegistration)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateRefreshToken provides a mock function with given fields: tx, refreshToken
func (_m *Database) UpdateRefreshToken(tx *sql.Tx, refreshToken *models.RefreshToken) error {
	ret := _m.Called(tx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for UpdateRefreshToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.RefreshToken) error); ok {
		r0 = rf(tx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateResource provides a mock function with given fields: tx, resource
func (_m *Database) UpdateResource(tx *sql.Tx, resource *models.Resource) error {
	ret := _m.Called(tx, resource)

	if len(ret) == 0 {
		panic("no return value specified for UpdateResource")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Resource) error); ok {
		r0 = rf(tx, resource)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSettings provides a mock function with given fields: tx, settings
func (_m *Database) UpdateSettings(tx *sql.Tx, settings *models.Settings) error {
	ret := _m.Called(tx, settings)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSettings")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.Settings) error); ok {
		r0 = rf(tx, settings)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUser provides a mock function with given fields: tx, user
func (_m *Database) UpdateUser(tx *sql.Tx, user *models.User) error {
	ret := _m.Called(tx, user)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.User) error); ok {
		r0 = rf(tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserAttribute provides a mock function with given fields: tx, userAttribute
func (_m *Database) UpdateUserAttribute(tx *sql.Tx, userAttribute *models.UserAttribute) error {
	ret := _m.Called(tx, userAttribute)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserAttribute")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserAttribute) error); ok {
		r0 = rf(tx, userAttribute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserConsent provides a mock function with given fields: tx, userConsent
func (_m *Database) UpdateUserConsent(tx *sql.Tx, userConsent *models.UserConsent) error {
	ret := _m.Called(tx, userConsent)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserConsent")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserConsent) error); ok {
		r0 = rf(tx, userConsent)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserGroup provides a mock function with given fields: tx, userGroup
func (_m *Database) UpdateUserGroup(tx *sql.Tx, userGroup *models.UserGroup) error {
	ret := _m.Called(tx, userGroup)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserGroup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserGroup) error); ok {
		r0 = rf(tx, userGroup)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserPermission provides a mock function with given fields: tx, userPermission
func (_m *Database) UpdateUserPermission(tx *sql.Tx, userPermission *models.UserPermission) error {
	ret := _m.Called(tx, userPermission)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserPermission")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserPermission) error); ok {
		r0 = rf(tx, userPermission)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserSession provides a mock function with given fields: tx, userSession
func (_m *Database) UpdateUserSession(tx *sql.Tx, userSession *models.UserSession) error {
	ret := _m.Called(tx, userSession)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserSession) error); ok {
		r0 = rf(tx, userSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateUserSessionClient provides a mock function with given fields: tx, userSessionClient
func (_m *Database) UpdateUserSessionClient(tx *sql.Tx, userSessionClient *models.UserSessionClient) error {
	ret := _m.Called(tx, userSessionClient)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserSessionClient")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserSessionClient) error); ok {
		r0 = rf(tx, userSessionClient)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserConsentsLoadClients provides a mock function with given fields: tx, userConsents
func (_m *Database) UserConsentsLoadClients(tx *sql.Tx, userConsents []models.UserConsent) error {
	ret := _m.Called(tx, userConsents)

	if len(ret) == 0 {
		panic("no return value specified for UserConsentsLoadClients")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []models.UserConsent) error); ok {
		r0 = rf(tx, userConsents)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserLoadAttributes provides a mock function with given fields: tx, user
func (_m *Database) UserLoadAttributes(tx *sql.Tx, user *models.User) error {
	ret := _m.Called(tx, user)

	if len(ret) == 0 {
		panic("no return value specified for UserLoadAttributes")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.User) error); ok {
		r0 = rf(tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserLoadGroups provides a mock function with given fields: tx, user
func (_m *Database) UserLoadGroups(tx *sql.Tx, user *models.User) error {
	ret := _m.Called(tx, user)

	if len(ret) == 0 {
		panic("no return value specified for UserLoadGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.User) error); ok {
		r0 = rf(tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserLoadPermissions provides a mock function with given fields: tx, user
func (_m *Database) UserLoadPermissions(tx *sql.Tx, user *models.User) error {
	ret := _m.Called(tx, user)

	if len(ret) == 0 {
		panic("no return value specified for UserLoadPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.User) error); ok {
		r0 = rf(tx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionClientsLoadClients provides a mock function with given fields: tx, userSessionClients
func (_m *Database) UserSessionClientsLoadClients(tx *sql.Tx, userSessionClients []models.UserSessionClient) error {
	ret := _m.Called(tx, userSessionClients)

	if len(ret) == 0 {
		panic("no return value specified for UserSessionClientsLoadClients")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []models.UserSessionClient) error); ok {
		r0 = rf(tx, userSessionClients)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionLoadClients provides a mock function with given fields: tx, userSession
func (_m *Database) UserSessionLoadClients(tx *sql.Tx, userSession *models.UserSession) error {
	ret := _m.Called(tx, userSession)

	if len(ret) == 0 {
		panic("no return value specified for UserSessionLoadClients")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserSession) error); ok {
		r0 = rf(tx, userSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionLoadUser provides a mock function with given fields: tx, userSession
func (_m *Database) UserSessionLoadUser(tx *sql.Tx, userSession *models.UserSession) error {
	ret := _m.Called(tx, userSession)

	if len(ret) == 0 {
		panic("no return value specified for UserSessionLoadUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, *models.UserSession) error); ok {
		r0 = rf(tx, userSession)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionsLoadClients provides a mock function with given fields: tx, userSessions
func (_m *Database) UserSessionsLoadClients(tx *sql.Tx, userSessions []models.UserSession) error {
	ret := _m.Called(tx, userSessions)

	if len(ret) == 0 {
		panic("no return value specified for UserSessionsLoadClients")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []models.UserSession) error); ok {
		r0 = rf(tx, userSessions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionsLoadUsers provides a mock function with given fields: tx, userSessions
func (_m *Database) UserSessionsLoadUsers(tx *sql.Tx, userSessions []models.UserSession) error {
	ret := _m.Called(tx, userSessions)

	if len(ret) == 0 {
		panic("no return value specified for UserSessionsLoadUsers")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []models.UserSession) error); ok {
		r0 = rf(tx, userSessions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersLoadGroups provides a mock function with given fields: tx, users
func (_m *Database) UsersLoadGroups(tx *sql.Tx, users []models.User) error {
	ret := _m.Called(tx, users)

	if len(ret) == 0 {
		panic("no return value specified for UsersLoadGroups")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []models.User) error); ok {
		r0 = rf(tx, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UsersLoadPermissions provides a mock function with given fields: tx, users
func (_m *Database) UsersLoadPermissions(tx *sql.Tx, users []models.User) error {
	ret := _m.Called(tx, users)

	if len(ret) == 0 {
		panic("no return value specified for UsersLoadPermissions")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*sql.Tx, []models.User) error); ok {
		r0 = rf(tx, users)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewDatabase creates a new instance of Database. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewDatabase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Database {
	mock := &Database{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
