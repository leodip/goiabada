//go:build !production

// Code generated by mockery v2.46.3. DO NOT EDIT.

package mocks_oauth

import (
	oauth "github.com/leodip/goiabada/core/oauth"
	mock "github.com/stretchr/testify/mock"
)

// TokenExchanger is an autogenerated mock type for the TokenExchanger type
type TokenExchanger struct {
	mock.Mock
}

// ExchangeCodeForTokens provides a mock function with given fields: code, redirectURI, clientId, clientSecret, codeVerifier, tokenEndpoint
func (_m *TokenExchanger) ExchangeCodeForTokens(code string, redirectURI string, clientId string, clientSecret string, codeVerifier string, tokenEndpoint string) (*oauth.TokenResponse, error) {
	ret := _m.Called(code, redirectURI, clientId, clientSecret, codeVerifier, tokenEndpoint)

	if len(ret) == 0 {
		panic("no return value specified for ExchangeCodeForTokens")
	}

	var r0 *oauth.TokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) (*oauth.TokenResponse, error)); ok {
		return rf(code, redirectURI, clientId, clientSecret, codeVerifier, tokenEndpoint)
	}
	if rf, ok := ret.Get(0).(func(string, string, string, string, string, string) *oauth.TokenResponse); ok {
		r0 = rf(code, redirectURI, clientId, clientSecret, codeVerifier, tokenEndpoint)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.TokenResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string, string, string, string, string) error); ok {
		r1 = rf(code, redirectURI, clientId, clientSecret, codeVerifier, tokenEndpoint)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenExchanger creates a new instance of TokenExchanger. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenExchanger(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenExchanger {
	mock := &TokenExchanger{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
