//go:build !production

// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks_oauth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	oauth "github.com/leodip/goiabada/core/oauth"

	rsa "crypto/rsa"
)

// TokenParser is an autogenerated mock type for the TokenParser type
type TokenParser struct {
	mock.Mock
}

// DecodeAndValidateTokenResponse provides a mock function with given fields: ctx, tokenResponse
func (_m *TokenParser) DecodeAndValidateTokenResponse(ctx context.Context, tokenResponse *oauth.TokenResponse) (*oauth.JwtInfo, error) {
	ret := _m.Called(ctx, tokenResponse)

	if len(ret) == 0 {
		panic("no return value specified for DecodeAndValidateTokenResponse")
	}

	var r0 *oauth.JwtInfo
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oauth.TokenResponse) (*oauth.JwtInfo, error)); ok {
		return rf(ctx, tokenResponse)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oauth.TokenResponse) *oauth.JwtInfo); ok {
		r0 = rf(ctx, tokenResponse)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.JwtInfo)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oauth.TokenResponse) error); ok {
		r1 = rf(ctx, tokenResponse)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DecodeAndValidateTokenString provides a mock function with given fields: ctx, token, pubKey
func (_m *TokenParser) DecodeAndValidateTokenString(ctx context.Context, token string, pubKey *rsa.PublicKey) (*oauth.JwtToken, error) {
	ret := _m.Called(ctx, token, pubKey)

	if len(ret) == 0 {
		panic("no return value specified for DecodeAndValidateTokenString")
	}

	var r0 *oauth.JwtToken
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *rsa.PublicKey) (*oauth.JwtToken, error)); ok {
		return rf(ctx, token, pubKey)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *rsa.PublicKey) *oauth.JwtToken); ok {
		r0 = rf(ctx, token, pubKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*oauth.JwtToken)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *rsa.PublicKey) error); ok {
		r1 = rf(ctx, token, pubKey)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenParser creates a new instance of TokenParser. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenParser(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenParser {
	mock := &TokenParser{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
