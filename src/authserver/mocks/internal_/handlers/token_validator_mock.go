// Code generated by mockery v2.46.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	validators "github.com/leodip/goiabada/core/validators"
)

// TokenValidator is an autogenerated mock type for the TokenValidator type
type TokenValidator struct {
	mock.Mock
}

// ValidateTokenRequest provides a mock function with given fields: ctx, input
func (_m *TokenValidator) ValidateTokenRequest(ctx context.Context, input *validators.ValidateTokenRequestInput) (*validators.ValidateTokenRequestResult, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ValidateTokenRequest")
	}

	var r0 *validators.ValidateTokenRequestResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *validators.ValidateTokenRequestInput) (*validators.ValidateTokenRequestResult, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *validators.ValidateTokenRequestInput) *validators.ValidateTokenRequestResult); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*validators.ValidateTokenRequestResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *validators.ValidateTokenRequestInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTokenValidator creates a new instance of TokenValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTokenValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *TokenValidator {
	mock := &TokenValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
