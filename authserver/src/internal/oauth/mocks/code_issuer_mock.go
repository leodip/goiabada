// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks_oauth

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "github.com/leodip/goiabada/authserver/internal/models"

	oauth "github.com/leodip/goiabada/authserver/internal/oauth"
)

// CodeIssuer is an autogenerated mock type for the CodeIssuer type
type CodeIssuer struct {
	mock.Mock
}

// CreateAuthCode provides a mock function with given fields: ctx, input
func (_m *CodeIssuer) CreateAuthCode(ctx context.Context, input *oauth.CreateCodeInput) (*models.Code, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuthCode")
	}

	var r0 *models.Code
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *oauth.CreateCodeInput) (*models.Code, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *oauth.CreateCodeInput) *models.Code); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Code)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *oauth.CreateCodeInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewCodeIssuer creates a new instance of CodeIssuer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewCodeIssuer(t interface {
	mock.TestingT
	Cleanup(func())
}) *CodeIssuer {
	mock := &CodeIssuer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
