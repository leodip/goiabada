// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"

	enums "github.com/leodip/goiabada/authserver/internal/enums"

	http "net/http"

	mock "github.com/stretchr/testify/mock"

	models "github.com/leodip/goiabada/authserver/internal/models"
)

// UserSessionManager is an autogenerated mock type for the UserSessionManager type
type UserSessionManager struct {
	mock.Mock
}

// BumpUserSession provides a mock function with given fields: r, sessionIdentifier, clientId
func (_m *UserSessionManager) BumpUserSession(r *http.Request, sessionIdentifier string, clientId int64) (*models.UserSession, error) {
	ret := _m.Called(r, sessionIdentifier, clientId)

	if len(ret) == 0 {
		panic("no return value specified for BumpUserSession")
	}

	var r0 *models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, string, int64) (*models.UserSession, error)); ok {
		return rf(r, sessionIdentifier, clientId)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, string, int64) *models.UserSession); ok {
		r0 = rf(r, sessionIdentifier, clientId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, string, int64) error); ok {
		r1 = rf(r, sessionIdentifier, clientId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HasValidUserSession provides a mock function with given fields: ctx, userSession, requestedMaxAgeInSeconds
func (_m *UserSessionManager) HasValidUserSession(ctx context.Context, userSession *models.UserSession, requestedMaxAgeInSeconds *int) bool {
	ret := _m.Called(ctx, userSession, requestedMaxAgeInSeconds)

	if len(ret) == 0 {
		panic("no return value specified for HasValidUserSession")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *models.UserSession, *int) bool); ok {
		r0 = rf(ctx, userSession, requestedMaxAgeInSeconds)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RequiresOTPAuth provides a mock function with given fields: ctx, client, userSession, targetAcrLevel
func (_m *UserSessionManager) RequiresOTPAuth(ctx context.Context, client *models.Client, userSession *models.UserSession, targetAcrLevel enums.AcrLevel) bool {
	ret := _m.Called(ctx, client, userSession, targetAcrLevel)

	if len(ret) == 0 {
		panic("no return value specified for RequiresOTPAuth")
	}

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, *models.Client, *models.UserSession, enums.AcrLevel) bool); ok {
		r0 = rf(ctx, client, userSession, targetAcrLevel)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// StartNewUserSession provides a mock function with given fields: w, r, userId, clientId, authMethods, acrLevel
func (_m *UserSessionManager) StartNewUserSession(w http.ResponseWriter, r *http.Request, userId int64, clientId int64, authMethods string, acrLevel string) (*models.UserSession, error) {
	ret := _m.Called(w, r, userId, clientId, authMethods, acrLevel)

	if len(ret) == 0 {
		panic("no return value specified for StartNewUserSession")
	}

	var r0 *models.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, int64, int64, string, string) (*models.UserSession, error)); ok {
		return rf(w, r, userId, clientId, authMethods, acrLevel)
	}
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, int64, int64, string, string) *models.UserSession); ok {
		r0 = rf(w, r, userId, clientId, authMethods, acrLevel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(http.ResponseWriter, *http.Request, int64, int64, string, string) error); ok {
		r1 = rf(w, r, userId, clientId, authMethods, acrLevel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserSessionManager creates a new instance of UserSessionManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserSessionManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserSessionManager {
	mock := &UserSessionManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
