// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	bytes "bytes"

	http "net/http"

	mock "github.com/stretchr/testify/mock"
)

// HttpHelper is an autogenerated mock type for the HttpHelper type
type HttpHelper struct {
	mock.Mock
}

// EncodeJson provides a mock function with given fields: w, r, data
func (_m *HttpHelper) EncodeJson(w http.ResponseWriter, r *http.Request, data interface{}) {
	_m.Called(w, r, data)
}

// InternalServerError provides a mock function with given fields: w, r, err
func (_m *HttpHelper) InternalServerError(w http.ResponseWriter, r *http.Request, err error) {
	_m.Called(w, r, err)
}

// JsonError provides a mock function with given fields: w, r, err
func (_m *HttpHelper) JsonError(w http.ResponseWriter, r *http.Request, err error) {
	_m.Called(w, r, err)
}

// RenderTemplate provides a mock function with given fields: w, r, layoutName, templateName, data
func (_m *HttpHelper) RenderTemplate(w http.ResponseWriter, r *http.Request, layoutName string, templateName string, data map[string]interface{}) error {
	ret := _m.Called(w, r, layoutName, templateName, data)

	if len(ret) == 0 {
		panic("no return value specified for RenderTemplate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http.ResponseWriter, *http.Request, string, string, map[string]interface{}) error); ok {
		r0 = rf(w, r, layoutName, templateName, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RenderTemplateToBuffer provides a mock function with given fields: r, layoutName, templateName, data
func (_m *HttpHelper) RenderTemplateToBuffer(r *http.Request, layoutName string, templateName string, data map[string]interface{}) (*bytes.Buffer, error) {
	ret := _m.Called(r, layoutName, templateName, data)

	if len(ret) == 0 {
		panic("no return value specified for RenderTemplateToBuffer")
	}

	var r0 *bytes.Buffer
	var r1 error
	if rf, ok := ret.Get(0).(func(*http.Request, string, string, map[string]interface{}) (*bytes.Buffer, error)); ok {
		return rf(r, layoutName, templateName, data)
	}
	if rf, ok := ret.Get(0).(func(*http.Request, string, string, map[string]interface{}) *bytes.Buffer); ok {
		r0 = rf(r, layoutName, templateName, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*bytes.Buffer)
		}
	}

	if rf, ok := ret.Get(1).(func(*http.Request, string, string, map[string]interface{}) error); ok {
		r1 = rf(r, layoutName, templateName, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewHttpHelper creates a new instance of HttpHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpHelper {
	mock := &HttpHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
