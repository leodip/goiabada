package server

import (
	"net/http"
	"time"

	"github.com/pkg/errors"

	"github.com/gorilla/csrf"
	"github.com/leodip/goiabada/internal/common"
	"github.com/leodip/goiabada/internal/constants"
	"github.com/leodip/goiabada/internal/entities"
	"github.com/leodip/goiabada/internal/enums"
	"github.com/leodip/goiabada/internal/lib"
	"github.com/pquerna/otp/totp"
)

func (s *Server) handleAuthOtpGet(otpSecretGenerator otpSecretGenerator) http.HandlerFunc {

	return func(w http.ResponseWriter, r *http.Request) {

		sess, err := s.sessionStore.Get(r, common.SessionName)
		if err != nil {
			s.internalServerError(w, r, err)
			return
		}
		authContext, err := s.getAuthContext(r)
		if err != nil {
			s.internalServerError(w, r, err)
			return
		}

		user, err := s.database.GetUserById(nil, authContext.UserId)
		if err != nil || user == nil {
			s.internalServerError(w, r, err)
			return
		}

		if !user.OTPEnabled {
			// must enroll first

			// generate secret
			settings := r.Context().Value(common.ContextKeySettings).(*entities.Settings)
			base64Image, secretKey, err := otpSecretGenerator.GenerateOTPSecret(user, settings)
			if err != nil {
				s.internalServerError(w, r, err)
				return
			}

			bind := map[string]interface{}{
				"error":       nil,
				"csrfField":   csrf.TemplateField(r),
				"base64Image": base64Image,
				"secretKey":   secretKey,
			}

			// save image and secret in the session state
			sess.Values[common.SessionKeyOTPSecret] = secretKey
			sess.Values[common.SessionKeyOTPImage] = base64Image
			err = sess.Save(r, w)
			if err != nil {
				s.internalServerError(w, r, err)
				return
			}

			err = s.renderTemplate(w, r, "/layouts/auth_layout.html", "/auth_otp_enrollment.html", bind)
			if err != nil {
				s.internalServerError(w, r, err)
				return
			}
		} else {

			delete(sess.Values, common.SessionKeyOTPImage)
			delete(sess.Values, common.SessionKeyOTPSecret)
			err = sess.Save(r, w)
			if err != nil {
				s.internalServerError(w, r, err)
				return
			}

			bind := map[string]interface{}{
				"error":     nil,
				"csrfField": csrf.TemplateField(r),
			}

			err = s.renderTemplate(w, r, "/layouts/auth_layout.html", "/auth_otp.html", bind)
			if err != nil {
				s.internalServerError(w, r, err)
				return
			}
		}
	}
}

func (s *Server) handleAuthOtpPost() http.HandlerFunc {

	return func(w http.ResponseWriter, r *http.Request) {

		authContext, err := s.getAuthContext(r)
		if err != nil {
			s.internalServerError(w, r, err)
			return
		}
		sess, err := s.sessionStore.Get(r, common.SessionName)
		if err != nil {
			s.internalServerError(w, r, err)
			return
		}

		base64Image, secretKey := "", ""
		if val, ok := sess.Values[common.SessionKeyOTPImage]; ok {
			base64Image = val.(string)
		}
		if val, ok := sess.Values[common.SessionKeyOTPSecret]; ok {
			secretKey = val.(string)
		}

		user, err := s.database.GetUserById(nil, authContext.UserId)
		if err != nil {
			s.internalServerError(w, r, err)
			return
		}

		renderError := func(message string) {
			bind := map[string]interface{}{
				"error":     message,
				"csrfField": csrf.TemplateField(r),
			}

			template := "/auth_otp.html"
			if len(base64Image) > 0 && len(secretKey) > 0 {
				template = "/auth_otp_enrollment.html"
				bind["base64Image"] = base64Image
				bind["secretKey"] = secretKey
			}

			err = s.renderTemplate(w, r, "/layouts/auth_layout.html", template, bind)
			if err != nil {
				s.internalServerError(w, r, err)
			}
		}

		otpCode := r.FormValue("otp")
		if len(otpCode) == 0 {
			renderError("OTP code is required.")
			return
		}

		incorrectOtpError := "Incorrect OTP Code. OTP codes are time-sensitive and change every 30 seconds. Make sure you're using the most recent code generated by your authenticator app."

		if user.OTPEnabled {
			// already has OTP enrolled
			otpValid := totp.Validate(otpCode, user.OTPSecret)
			if !otpValid {
				lib.LogAudit(constants.AuditAuthFailedOtp, map[string]interface{}{
					"userId": user.Id,
				})
				renderError(incorrectOtpError)
				return
			}
		} else {
			// is enrolling to TOTP now
			otpValid := totp.Validate(otpCode, secretKey)
			if !otpValid {
				lib.LogAudit(constants.AuditAuthFailedOtp, map[string]interface{}{
					"userId": user.Id,
				})
				renderError(incorrectOtpError)
				return
			}

			// save TOTP secret
			user.OTPSecret = secretKey
			user.OTPEnabled = true
			err = s.database.UpdateUser(nil, user)
			if err != nil {
				s.internalServerError(w, r, err)
				return
			}
		}

		lib.LogAudit(constants.AuditAuthSuccessOtp, map[string]interface{}{
			"userId": user.Id,
		})

		if !user.Enabled {
			lib.LogAudit(constants.AuditUserDisabled, map[string]interface{}{
				"userId": user.Id,
			})
			renderError("Your account is disabled.")
			return
		}

		client, err := s.database.GetClientByClientIdentifier(nil, authContext.ClientId)
		if err != nil {
			s.internalServerError(w, r, err)
			return
		}
		if client == nil {
			s.internalServerError(w, r, errors.WithStack(errors.New("client not found")))
			return
		}

		requestedAcrValues := authContext.ParseRequestedAcrValues()
		targetAcrLevel := client.DefaultAcrLevel

		if len(requestedAcrValues) > 0 {
			targetAcrLevel = requestedAcrValues[0]
		}

		// start new session
		_, err = s.startNewUserSession(w, r, user.Id, client.Id,
			enums.AuthMethodPassword.String()+" "+enums.AuthMethodOTP.String(), targetAcrLevel.String())
		if err != nil {
			s.internalServerError(w, r, err)
			return
		}

		// redirect to consent
		authContext.AcrLevel = targetAcrLevel.String()
		authContext.AuthMethods = enums.AuthMethodPassword.String() + " " + enums.AuthMethodOTP.String()
		authContext.AuthTime = time.Now().UTC()
		authContext.AuthCompleted = true
		err = s.saveAuthContext(w, r, authContext)
		if err != nil {
			s.internalServerError(w, r, err)
			return
		}

		http.Redirect(w, r, lib.GetBaseUrl()+"/auth/consent", http.StatusFound)
	}
}
